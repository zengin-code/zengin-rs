name: update-source-data

on:
  schedule:
    # 毎日12:00 JST (3:00 UTC)
    - cron: '0 3 * * *'
  workflow_dispatch:

jobs:
  update:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up git user
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Update submodules
        run: git submodule update --remote --merge

      - name: Check for changes
        id: changes
        run: |
          git add source-data
          if git diff --cached --quiet; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Bump patch version in Cargo.toml
        if: steps.changes.outputs.changed == 'true'
        run: |
          VERSION_LINE=$(grep '^version = ' Cargo.toml)
          VERSION=$(echo $VERSION_LINE | sed -E "s/version = \"([0-9]+\.[0-9]+\.)([0-9]+)\"/\1\2/")
          MAJOR_MINOR=$(echo $VERSION | cut -d. -f1,2)
          PATCH=$(echo $VERSION | cut -d. -f3)
          NEW_PATCH=$((PATCH+1))
          NEW_VERSION="$MAJOR_MINOR.$NEW_PATCH"
          sed -i -E "s/^version = \"[0-9]+\.[0-9]+\.[0-9]+\"/version = \"$NEW_VERSION\"/" Cargo.toml
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Commit and push changes
        if: steps.changes.outputs.changed == 'true'
        run: |
          NEW_VERSION=$(grep '^version = ' Cargo.toml | sed -E 's/version = "([0-9]+\.[0-9]+\.[0-9]+)"/\1/')
          git add Cargo.toml source-data
          git commit -m "Update: v$NEW_VERSION"
          git push origin HEAD:main

      - name: Publish to crates.io
        if: steps.changes.outputs.changed == 'true'
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          git fetch --all
          git checkout main
          git pull origin main
          git submodule update --init --recursive --remote
          cargo publish --token "$CARGO_REGISTRY_TOKEN" || echo "cargo publish failed (possibly already published)"
